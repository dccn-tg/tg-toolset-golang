type Account {
	active: Boolean!
	expiresOn: DateTime
	passwordExpiresOn: AccountPasswordExpiration!
	lastLogon: DateTime
	user: User!
	primaryGroup: Group
	homeStorage: Storage
}

type AccountPasswordExpiration {
	expired: Boolean!
	expiresOn: DateTime
}

type ActivateLabAccountOutput {
	account: LabAccount!
	password: String!
}

input BookableResourceFilter {
	id: IdFilter
	typ: ResourceTypeFilter
	lab: LabFilter
	room: RoomFilter
}

input BookableResourceOrdering {
	field: BookableResourceOrderingField!
	direction: OrderingDirection! = Ascending
}

enum BookableResourceOrderingField {
	Id
	Typ
}

type Booking {
	id: ID!
	createdAt: DateTime!
	updatedAt: DateTime!
	title: String
	rrule: String
	owner: User!
	project: Project
	experiment: Experiment
	events(filterBy: BookingEventFilter, orderBy: BookingEventOrdering): [BookingEvent!]!
}

type BookingConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [BookingEdge!]!
}

"""
An edge in a connection.
"""
type BookingEdge {
	"""
	The item at the end of the edge
	"""
	node: Booking!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type BookingEvent {
	id: ID!
	createdAt: DateTime!
	updatedAt: DateTime!
	start: DateTime!
	end: DateTime!
	status: BookingEventStatus!
	statusUpdatedAt: DateTime!
	subject: String
	session: String
	remark: String
	booking: Booking!
	resource: Resource!
}

type BookingEventConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [BookingEventEdge!]!
}

"""
An edge in a connection.
"""
type BookingEventEdge {
	"""
	The item at the end of the edge
	"""
	node: BookingEvent!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input BookingEventFilter {
	id: IdFilter
	createdAt: DateTimeFilter
	updatedAt: DateTimeFilter
	start: DateTimeFilter
	end: DateTimeFilter
	status: BookingEventStatusFilter
	statusUpdatedAt: DateTimeFilter
	subject: StringFilter
	session: StringFilter
	remark: StringFilter
	bookableResource: BookableResourceFilter
	booking: BookingFilter
}

input BookingEventOrdering {
	field: BookingEventOrderingField!
	direction: OrderingDirection! = Ascending
}

enum BookingEventOrderingField {
	Id
	CreatedAt
	UpdatedAt
	Booking
	BookableResource
	Start
	End
	Status
	StatusUpdatedAt
	Subject
	Session
	Remark
}

enum BookingEventStatus {
	Tentative
	Confirmed
	Rejected
	CancelRequested
	CanceledInTime
	CanceledNotInTime
}

input BookingEventStatusFilter {
	null: Boolean
	equals: BookingEventStatus
	notEquals: BookingEventStatus
	in: [BookingEventStatus!]
}

input BookingFilter {
	id: IdFilter
	createdAt: DateTimeFilter
	updatedAt: DateTimeFilter
	title: StringFilter
	project: ProjectFilter
	experiment: ExperimentFilter
	owner: UserFilter
}

input BookingOrdering {
	field: BookingOrderingField!
	direction: OrderingDirection! = Ascending
}

enum BookingOrderingField {
	Id
	CreatedAt
	UpdatedAt
	Title
	Owner
	Project
	Experiment
}

input BoolFilter {
	null: Boolean
	equals: Boolean
	notEquals: Boolean
}


type Building {
	id: ID!
	name: String!
	address: String!
	rooms(filterBy: RoomFilter, orderBy: RoomOrdering): [Room!]!
	organisationalUnits(filterBy: OrganisationalUnitFilter, orderBy: OrganisationalUnitOrdering): [OrganisationalUnit!]!
	organizationalUnits(filterBy: OrganisationalUnitFilter, orderBy: OrganisationalUnitOrdering): [OrganisationalUnit!]! @deprecated(reason: "Use `organisationalUnits` instead")
}

input BuildingFilter {
	id: IdFilter
	name: StringFilter
	address: StringFilter
}

input BuildingOrdering {
	field: BuildingOrderingField!
	direction: OrderingDirection! = Ascending
}

enum BuildingOrderingField {
	Id
	Name
	Address
}

input CreateAccountInput {
	primaryGroup: ID!
	expiresOn: DateTime
	homeQuotaGiB: Int
	expirePassword: Boolean! = true
}

type CreateAccountOutput {
	account: Account!
	password: String!
	storageTaskId: ID
}

input CreateBookingInput {
	title: String
	rrule: String
	owner: ID!
	project: ID
	experiment: ID
	events: [CreateBookingInput_Event!]! = []
}

input CreateBookingInput_Event {
	start: DateTime!
	end: DateTime!
	resource: ResourceID!
	status: BookingEventStatus
	subject: String
	session: String
	remark: String
}

input CreateBuildingInput {
	name: String!
	address: String!
}

input CreateExperimentInput {
	project: ID!
	numSubjects: Int!
	numSessions: Int!
	sessionDurationMinutes: Int!
	modality: ID!
	quotaRuleVersion: Int
	withStructuralMri: Boolean
}

input CreateFundingSourceInput {
	name: String!
}

input CreateGroupInput {
	name: String!
	status: GroupStatus
	head: ID
}

input CreateLabInput {
	name: String!
	room: ID!
	bookable: Boolean! = false
	modalities: [ID!]! = []
}

input CreateModalityInput {
	name: String!
	shortName: String
	legacy: Boolean
}

input CreateOrganisationalUnitInput {
	name: String!
	description: String!
}

input CreateProjectInput {
	fundingSource: ID!
	title: String!
	status: ProjectStatus
	owner: ID!
	start: DateTime!
	end: DateTime!
	overrulingQuotaGiB: Int
	members: [CreateProjectInput_Member!]! = []
	experiments: [CreateProjectInput_Experiment!]! = []
	experimenters: [ID!]! = []
	ethicalApprovals: [CreateProjectInput_EthicalApproval!]! = []
}

input CreateProjectInput_EthicalApproval {
	name: String!
	status: EthicalApprovalStatus
}

input CreateProjectInput_Experiment {
	modality: ID!
	numSubjects: Int!
	numSessions: Int!
	sessionDurationMinutes: Int!
	withStructuralMri: Boolean
	quotaRuleVersion: Int
}

input CreateProjectInput_Member {
	user: ID!
	role: ProjectMemberRole!
}

input CreateProjectProposalInput {
	meetingDate: NaiveDate!
}

input CreateRoomInput {
	floor: Int
	number: String!
	name: String
	phone: String
	flex: Boolean
	desks: Int
	comments: String
	building: ID!
	bookable: Boolean! = false
}

input CreateUserBillingCategoryInput {
	name: String!
	description: String
}

input CreateUserInput {
	firstName: String
	middleName: String
	lastName: String
	overrideName: String
	function: UserFunction
	email: String
	emailExt: String
	phone: String
	phoneExt: String
	status: UserStatus
	room: String
	billingCategory: ID
	desk: Int
}

input CurrentQuotaRuleFilter {
	modality: IdFilter
	version: IntegerFilter
	updatedAt: DateTimeFilter
	sessionQuotaMib: IntegerFilter
}

scalar DateTime

input DateTimeFilter {
	null: Boolean
	equals: DateTime
	notEquals: DateTime
	in: [DateTime!]
	before: DateTime
	after: DateTime
}

type DeleteAccountOutput {
	storageTaskId: ID
}

type EthicalApproval {
	name: String!
	status: EthicalApprovalStatus! @deprecated
	project: Project!
}

input EthicalApprovalFilter {
	name: StringFilter
	status: EthicalApprovalStatusFilter
	project: ProjectFilter
}

input EthicalApprovalOrdering {
	field: EthicalApprovalOrderingField!
	direction: OrderingDirection! = Ascending
}

enum EthicalApprovalOrderingField {
	Name
	Status
	Project
}

enum EthicalApprovalStatus {
	Approved
	Pending
}

input EthicalApprovalStatusFilter {
	null: Boolean
	equals: EthicalApprovalStatus
	notEquals: EthicalApprovalStatus
	in: [EthicalApprovalStatus!]
}

type Experiment {
	id: ID!
	numSubjects: Int!
	numSessions: Int!
	sessionDurationMinutes: Int!
	withStructuralMri: Boolean!
	sessionQuotaMiB: Int!
	project: Project!
	modality: Modality!
	bookings(filterBy: BookingFilter, orderBy: BookingOrdering): [Booking!]!
}

input ExperimentFilter {
	id: IdFilter
	numSubjects: IntegerFilter
	numSessions: IntegerFilter
	sessionDurationMinutes: IntegerFilter
	quotaRuleVersion: IntegerFilter
	withStructuralMri: BoolFilter
	modality: ModalityFilter
	project: ProjectFilter
}

input ExperimentOrdering {
	field: ExperimentOrderingField!
	direction: OrderingDirection! = Ascending
}

enum ExperimentOrderingField {
	Id
	Project
	NumSubjects
	NumSessions
	SessionDurationMinutes
	Modality
	QuotaRuleVersion
	WithStructuralMri
}

enum FilerTaskStatus {
	Waiting
	Processing
	Failed
	Succeeded
	Canceled
}

type FilerTaskStatusOutput {
	type: FilerTaskType!
	id: ID!
	status: FilerTaskStatus!
	result: String
	error: String
}

enum FilerTaskType {
	User
	Project
}


type FundingSource {
	id: ID!
	number: String!
	name: String!
	projects(filterBy: ProjectFilter, orderBy: ProjectOrdering): [Project!]!
}

input FundingSourceFilter {
	id: IdFilter
	name: StringFilter
}

input FundingSourceOrdering {
	field: FundingSourceOrderingField!
	direction: OrderingDirection! = Ascending
}

enum FundingSourceOrderingField {
	Id
	Name
}

type Group {
	id: ID!
	name: String!
	status: GroupStatus!
	head: User
	members(orderBy: GroupMemberOrdering): [GroupMember!]!
	organisationalUnits(filterBy: OrganisationalUnitFilter, orderBy: OrganisationalUnitOrdering): [OrganisationalUnit!]!
	organizationalUnits(filterBy: OrganisationalUnitFilter, orderBy: OrganisationalUnitOrdering): [OrganisationalUnit!]! @deprecated(reason: "Use `organisationalUnits` instead")
}

input GroupFilter {
	id: IdFilter
	name: StringFilter
	status: GroupStatusFilter
	head: UserFilter
}

type GroupMember {
	group: Group!
	member: User!
	primary: Boolean!
	role: GroupMemberRole! @deprecated
}

input GroupMemberOrdering {
	field: GroupMemberOrderingField!
	direction: OrderingDirection! = Ascending
}

enum GroupMemberOrderingField {
	Group
	Member
}

enum GroupMemberRole {
	Head
	Member
}

input GroupOrdering {
	field: GroupOrderingField!
	direction: OrderingDirection! = Ascending
}

enum GroupOrderingField {
	Id
	Name
	Status
	Head
}

enum GroupStatus {
	Active
	Inactive
}

input GroupStatusFilter {
	null: Boolean
	equals: GroupStatus
	notEquals: GroupStatus
	in: [GroupStatus!]
}


input IdFilter {
	equals: ID
	notEquals: ID
	in: [ID!]
}


input IntegerFilter {
	null: Boolean
	equals: Int
	notEquals: Int
	in: [Int!]
	lessThan: Int
	lessThanEquals: Int
	greaterThan: Int
	greaterThanEquals: Int
}

type Lab {
	id: ID!
	name: String!
	bookable: Boolean!
	room: Room!
	modalities(filterBy: ModalityFilter, orderBy: ModalityOrdering): [Modality!]!
	organisationalUnits(filterBy: OrganisationalUnitFilter, orderBy: OrganisationalUnitOrdering): [OrganisationalUnit!]!
	organizationalUnits(filterBy: OrganisationalUnitFilter, orderBy: OrganisationalUnitOrdering): [OrganisationalUnit!]! @deprecated(reason: "Use `organisationalUnits` instead")
}

type LabAccount {
	username: String!
	expiresOn: DateTime!
}

input LabFilter {
	id: IdFilter
	name: StringFilter
	room: RoomFilter
}

input LabOrdering {
	field: LabOrderingField!
	direction: OrderingDirection! = Ascending
}

enum LabOrderingField {
	Id
	Name
	Room
}

type Modality {
	id: ID!
	name: String!
	shortName: String!
	legacy: Boolean!
	experiments(filterBy: ExperimentFilter, orderBy: ExperimentOrdering): [Experiment!]!
	sessionQuotaMiB(version: Int): Int!
}

input ModalityFilter {
	name: StringFilter
	shortName: StringFilter
	legacy: BoolFilter
	id: CurrentQuotaRuleFilter
}

input ModalityOrdering {
	field: ModalityOrderingField!
	direction: OrderingDirection! = Ascending
}

enum ModalityOrderingField {
	Id
	Name
	ShortName
	Legacy
}

type Mutation {
	createAccount(username: ID!, data: CreateAccountInput!): CreateAccountOutput!
	updateAccount(username: ID!, data: UpdateAccountInput!): UpdateAccountOutput!
	deleteAccount(username: ID!): DeleteAccountOutput!
	activateLabAccount(username: ID!, expiresOn: DateTime): ActivateLabAccountOutput!
	createBooking(data: CreateBookingInput!): Booking!
	updateBooking(id: ID!, data: UpdateBookingInput!): Booking!
	deleteBooking(id: ID!): Booking!
	updateBookingEvent(id: ID!, data: UpdateBookingEventInput!): BookingEvent!
	deleteBookingEvent(id: ID!): BookingEvent!
	createBuilding(id: ID!, data: CreateBuildingInput!): Building!
	updateBuilding(id: ID!, data: UpdateBuildingInput!): Building!
	deleteBuilding(id: ID!): Building!
	createEthicalApproval(name: String!, project: ID!, status: EthicalApprovalStatus): EthicalApproval!
	updateEthicalApprovalStatus(name: String!, project: ID!, status: EthicalApprovalStatus!): EthicalApproval!
	deleteEthicalApproval(name: String!, project: ID!): EthicalApproval!
	createExperiment(data: CreateExperimentInput!): Experiment!
	updateExperiment(id: ID!, data: UpdateExperimentInput!): Experiment!
	deleteExperiment(id: ID!): Experiment!
	addExperimenterToProject(project: ID!, user: ID!): Boolean!
	createFundingSource(id: ID!, data: CreateFundingSourceInput!): FundingSource!
	updateFundingSource(id: ID!, data: UpdateFundingSourceInput!): FundingSource!
	deleteFundingSource(id: ID!): FundingSource!
	createGroup(id: ID!, data: CreateGroupInput!): Group!
	updateGroup(id: ID!, data: UpdateGroupInput!): Group!
	deleteGroup(id: ID!): Group!
	addOrUpdateGroupMember(group: ID!, member: ID!, role: GroupMemberRole): GroupMember! @deprecated(reason: "Use `addUserToGroup` and `updateGroup` instead")
	addUserToGroup(group: ID!, user: ID!): Boolean!
	createLab(id: ID!, data: CreateLabInput!): Lab!
	updateLab(id: ID!, data: UpdateLabInput!): Lab!
	deleteLab(id: ID!): Lab!
	addModalityToLab(lab: ID!, modality: ID!): Boolean!
	createModality(id: ID!, data: CreateModalityInput!): Modality!
	updateModality(id: ID!, data: UpdateModalityInput!): Modality!
	deleteModality(id: ID!): Modality!
	createOrganisationalUnit(id: ID!, data: CreateOrganisationalUnitInput!): OrganisationalUnit!
	updateOrganisationalUnit(id: ID!, data: UpdateOrganisationalUnitInput!): OrganisationalUnit!
	deleteOrganisationalUnit(id: ID!): OrganisationalUnit!
	addGroupToOrganisationalUnit(ou: ID!, group: ID!): Boolean!
	addLabToOrganisationalUnit(ou: ID!, lab: ID!): Boolean!
	createOrganizationalUnit(id: ID!, data: CreateOrganisationalUnitInput!): OrganisationalUnit! @deprecated(reason: "Use `createOrganisationalUnit` instead")
	updateOrganizationalUnit(id: ID!, data: UpdateOrganisationalUnitInput!): OrganisationalUnit! @deprecated(reason: "Use `updateOrganisationalUnit` instead")
	deleteOrganizationalUnit(id: ID!): OrganisationalUnit! @deprecated(reason: "Use `deleteOrganisationalUnit` instead")
	addGroupToOrganizationalUnit(id: ID!, group: ID!): Boolean! @deprecated(reason: "Use `addGroupToOrganisationalUnit` instead")
	addLabToOrganizationalUnit(id: ID!, lab: ID!): Boolean! @deprecated(reason: "Use `addLabToOrganisationalUnit` instead")
	createProject(id: ID, data: CreateProjectInput!): Project!
	updateProject(id: ID!, data: UpdateProjectInput!): Project!
	deleteProject(id: ID!): Project!
	createProjectProposal(id: ID!, data: CreateProjectProposalInput!): ProjectProposal!
	updateProjectProposal(id: ID!, data: UpdateProjectProposalInput!): ProjectProposal!
	deleteProjectProposal(id: ID!): ProjectProposal!
	createRoom(id: ID!, data: CreateRoomInput!): Room!
	updateRoom(id: ID!, data: UpdateRoomInput!): Room!
	deleteRoom(id: ID!): Room!
	createUser(id: ID!, data: CreateUserInput): User!
	updateUser(id: ID!, data: UpdateUserInput!): User!
	createUserBillingCategory(id: ID!, data: CreateUserBillingCategoryInput!): UserBillingCategory!
	updateUserBillingCategory(id: ID!, data: UpdateUserBillingCategoryInput!): UserBillingCategory!
	deleteUserBillingCategory(id: ID!): UserBillingCategory!
}

"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar NaiveDate

enum OrderingDirection {
	Ascending
	Descending
}

type OrganisationalUnit {
	id: ID!
	name: String!
	description: String!
	buildings(filterBy: BuildingFilter, orderBy: BuildingOrdering): [Building!]!
	groups(filterBy: GroupFilter, orderBy: GroupOrdering): [Group!]!
	labs(filterBy: LabFilter, orderBy: LabOrdering): [Lab!]!
	rooms(filterBy: RoomFilter, orderBy: RoomOrdering): [Room!]!
	users(filterBy: UserFilter, orderBy: UserOrdering): [User!]!
}

input OrganisationalUnitFilter {
	id: IdFilter
	name: StringFilter
	description: StringFilter
}

type OrganisationalUnitMember {
	organisationalUnit: OrganisationalUnit! @deprecated
	user: User! @deprecated
	primary: Boolean! @deprecated
}

input OrganisationalUnitOrdering {
	field: OrganisationalUnitOrderingField!
	direction: OrderingDirection! = Ascending
}

enum OrganisationalUnitOrderingField {
	Id
	Name
	Description
}

input OrganisationalUnitUserFilter {
	primary: BoolFilter
	user: UserFilter
	ou: OrganisationalUnitFilter
}

input OrganisationalUnitUserOrdering {
	field: OrganisationalUnitUserOrderingField!
	direction: OrderingDirection! = Ascending
}

enum OrganisationalUnitUserOrderingField {
	Ou
	User
	Primary
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

enum PendingProjectMemberUpdate {
	ChangeToManager
	ChangeToContributor
	ChangeToViewer
	Remove
}

type Project {
	id: ID!
	number: String!
	createdAt: DateTime!
	updatedAt: DateTime!
	start: DateTime!
	end: DateTime!
	title: String!
	status: ProjectStatus!
	overrulingQuotaGiB: Int
	overrulingQuotaUpdatedAt: DateTime
	owner: User!
	fundingSource: FundingSource!
	experiments(filterBy: ExperimentFilter, orderBy: ExperimentOrdering): [Experiment!]!
	experimenters(filterBy: UserFilter, orderBy: UserOrdering): [User!]!
	ethicalApprovals(filterBy: EthicalApprovalFilter, orderBy: EthicalApprovalOrdering): [EthicalApproval!]!
	members(orderBy: ProjectMemberOrdering): [ProjectMember!]!
	proposal: ProjectProposal
	bookings(filterBy: BookingFilter, orderBy: BookingOrdering): [Booking!]!
	storage: Storage
}

type ProjectConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ProjectEdge!]!
}

"""
An edge in a connection.
"""
type ProjectEdge {
	"""
	The item at the end of the edge
	"""
	node: Project!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input ProjectFilter {
	id: IdFilter
	createdAt: DateTimeFilter
	updatedAt: DateTimeFilter
	title: StringFilter
	status: ProjectStatusFilter
	start: DateTimeFilter
	end: DateTimeFilter
	overrulingQuotaGiB: IntegerFilter
	overrulingQuotaUpdatedAt: DateTimeFilter
	owner: UserFilter
	fundingSource: FundingSourceFilter
}

type ProjectMember {
	project: Project!
	user: User!
	member: User! @deprecated(reason: "Use `user` instead")
	role: ProjectMemberRole
	pendingUpdate: PendingProjectMemberUpdate
}

input ProjectMemberOrdering {
	field: ProjectMemberOrderingField!
	direction: OrderingDirection! = Ascending
}

enum ProjectMemberOrderingField {
	PROJECT
	MEMBER
	ROLE
	PENDING_UPDATE
}

enum ProjectMemberRole {
	Manager
	Contributor
	Viewer
	Traverse
}

input ProjectOrdering {
	field: ProjectOrderingField!
	direction: OrderingDirection! = Ascending
}

enum ProjectOrderingField {
	Id
	CreatedAt
	UpdatedAt
	FundingSource
	Title
	Status
	Owner
	Start
	End
	OverrulingQuotaGiB
	OverrulingQuotaUpdatedAt
}

type ProjectProposal {
	meetingDate: NaiveDate!
	project: Project!
}

enum ProjectStatus {
	Active
	Inactive
}

input ProjectStatusFilter {
	null: Boolean
	equals: ProjectStatus
	notEquals: ProjectStatus
	in: [ProjectStatus!]
}

type Query {
	bookings(id: [ID!], filterBy: BookingFilter, orderBy: BookingOrdering): [Booking!]!
	bookingsConnection(after: String, before: String, first: Int, last: Int, filterBy: BookingFilter, orderBy: BookingOrdering): BookingConnection!
	booking(id: ID!): Booking
	bookingEvents(id: [ID!], filterBy: BookingEventFilter, orderBy: BookingEventOrdering): [BookingEvent!]!
	bookingEventsConnection(after: String, before: String, first: Int, last: Int, filterBy: BookingEventFilter, orderBy: BookingEventOrdering): BookingEventConnection!
	bookingEvent(id: ID!): BookingEvent
	buildings(id: [ID!], filterBy: BuildingFilter, orderBy: BuildingOrdering): [Building!]!
	building(id: ID!): Building
	experiments(id: [ID!], filterBy: ExperimentFilter, orderBy: ExperimentOrdering): [Experiment!]!
	experiment(id: ID!): Experiment
	filerTaskStatus(type: FilerTaskType!, id: ID!): FilerTaskStatusOutput
	fundingSource(number: ID!): FundingSource
	fundingSources(number: [ID!], filterBy: FundingSourceFilter, orderBy: FundingSourceOrdering): [FundingSource!]!
	groups(id: [ID!], filterBy: GroupFilter, orderBy: GroupOrdering): [Group!]!
	group(id: ID!): Group
	labs(id: [ID!], filterBy: LabFilter, orderBy: LabOrdering): [Lab!]!
	lab(id: ID!): Lab
	modalities(id: [ID!], filterBy: ModalityFilter, orderBy: ModalityOrdering): [Modality!]!
	modality(id: ID!): Modality
	organisationalUnits(id: [ID!], filterBy: OrganisationalUnitFilter, orderBy: OrganisationalUnitOrdering): [OrganisationalUnit!]!
	organisationalUnit(id: ID!): OrganisationalUnit
	projects(id: [ID!], filterBy: ProjectFilter, orderBy: ProjectOrdering): [Project!]!
	projectsConnection(after: String, before: String, first: Int, last: Int, filterBy: ProjectFilter, orderBy: ProjectOrdering): ProjectConnection!
	project(id: ID!): Project
	projectsOwnedBy(user: ID!, orderBy: ProjectOrdering): [Project!]! @deprecated
	projectsExperimenterOf(user: ID!, orderBy: ProjectOrdering): [Project!]! @deprecated
	bookableResources(id: [ResourceID!], filterBy: BookableResourceFilter, orderBy: BookableResourceOrdering): [Resource!]!
	rooms(id: [ID!], filterBy: RoomFilter, orderBy: RoomOrdering): [Room!]!
	roomsConnection(after: String, before: String, first: Int, last: Int, filterBy: RoomFilter, orderBy: RoomOrdering): RoomConnection!
	room(id: ID!): Room
	users(id: [ID!], filterBy: UserFilter, orderBy: UserOrdering): [User!]!
	usersConnection(after: String, before: String, first: Int, last: Int, filterBy: UserFilter, orderBy: UserOrdering): UserConnection!
	user(id: ID!): User
	userBillingCategories(id: [ID!], filterBy: UserBillingCategoryFilter, orderBy: UserBillingCategoryOrdering): [UserBillingCategory!]!
	userBillingCategory(id: ID!): UserBillingCategory
}

union Resource = Lab | Room

input ResourceID {
	type: ResourceType!
	id: ID!
}

enum ResourceType {
	Item
	Lab
	Room
}

input ResourceTypeFilter {
	null: Boolean
	equals: ResourceType
	notEquals: ResourceType
	in: [ResourceType!]
}

type Room {
	id: ID!
	floor: Int
	number: String!
	name: String
	phone: String
	flex: Boolean
	desks: Int
	comments: String
	bookable: Boolean!
	building: Building!
	users(filterBy: UserFilter, orderBy: UserOrdering): [User!]!
	organisationalUnits(filterBy: OrganisationalUnitFilter, orderBy: OrganisationalUnitOrdering): [OrganisationalUnit!]!
	organizationalUnits(filterBy: OrganisationalUnitFilter, orderBy: OrganisationalUnitOrdering): [OrganisationalUnit!]! @deprecated(reason: "Use `organisationalUnits` instead")
}

type RoomConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [RoomEdge!]!
}

"""
An edge in a connection.
"""
type RoomEdge {
	"""
	The item at the end of the edge
	"""
	node: Room!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input RoomFilter {
	id: IdFilter
	floor: IntegerFilter
	number: StringFilter
	name: StringFilter
	phone: StringFilter
	flex: BoolFilter
	desks: IntegerFilter
	comments: StringFilter
	building: BuildingFilter
}

input RoomOrdering {
	field: RoomOrderingField!
	direction: OrderingDirection! = Ascending
}

enum RoomOrderingField {
	Id
	Floor
	Number
	Name
	Phone
	Flex
	Desks
	Comments
	Building
}

type Storage {
	quotaGiB: Int!
	usageMiB: Int!
}


input StringFilter {
	null: Boolean
	equals: String
	notEquals: String
	in: [String!]
	contains: String
	startsWith: String
}

input UpdateAccountInput {
	active: Boolean
	expiresOn: DateTime
	resetPassword: Boolean! = false
	expirePassword: Boolean! = true
	homeQuotaGiB: Int
}

type UpdateAccountOutput {
	account: Account!
	password: String
	storageTaskId: ID
}

input UpdateBookingEventInput {
	bookableResource: ID
	start: DateTime
	end: DateTime
	status: BookingEventStatus
	subject: String
	session: String
	remark: String
	resource: ResourceID
}

input UpdateBookingInput {
	title: String
	rrule: String
	owner: ID
	project: ID
	experiment: ID
}

input UpdateBuildingInput {
	name: String
	address: String
}

input UpdateExperimentInput {
	project: ID
	numSubjects: Int
	numSessions: Int
	sessionDurationMinutes: Int
	modality: ID
	quotaRuleVersion: Int
	withStructuralMri: Boolean
}

input UpdateFundingSourceInput {
	name: String
}

input UpdateGroupInput {
	name: String
	status: GroupStatus
	head: ID
}

input UpdateLabInput {
	name: String
	room: ID
}

input UpdateModalityInput {
	name: String
	shortName: String
	legacy: Boolean
}

input UpdateOrganisationalUnitInput {
	name: String
	description: String
}

input UpdateProjectInput {
	fundingSource: ID
	title: String
	status: ProjectStatus
	owner: ID
	start: DateTime
	end: DateTime
	overrulingQuotaGiB: Int
	experimenters: [ID!]
}

input UpdateProjectProposalInput {
	meetingDate: NaiveDate
}

input UpdateRoomInput {
	floor: Int
	number: String
	name: String
	phone: String
	flex: Boolean
	desks: Int
	comments: String
	building: ID
}

input UpdateUserBillingCategoryInput {
	name: String
	description: String
}

input UpdateUserInput {
	firstName: String
	middleName: String
	lastName: String
	overrideName: String
	function: UserFunction
	email: String
	emailExt: String
	phone: String
	phoneExt: String
	status: UserStatus
	room: String
	billingCategory: ID
	desk: Int
}

type User {
	id: ID!
	username: String!
	createdAt: DateTime!
	updatedAt: DateTime!
	status: UserStatus!
	firstName: String
	middleName: String
	lastName: String
	overrideName: String
	displayName: String!
	function: UserFunction!
	email: String
	emailExt: String
	phone: String
	phoneExt: String
	desk: Int
	room: Room
	account: Account
	labAccount: LabAccount
	groups(orderBy: GroupMemberOrdering): [GroupMember!]!
	projects(orderBy: ProjectMemberOrdering): [ProjectMember!]!
	billingCategory: UserBillingCategory!
	experimenterOf(filterBy: ProjectFilter, orderBy: ProjectOrdering): [Project!]!
	primaryOrganisationalUnit: OrganisationalUnit!
	organisationalUnits(filterBy: OrganisationalUnitFilter, orderBy: OrganisationalUnitOrdering): [OrganisationalUnit!]!
	organizationalUnits(filterBy: OrganisationalUnitUserFilter, orderBy: OrganisationalUnitUserOrdering): [OrganisationalUnitMember!]! @deprecated(reason: "Use `organisationalUnits` and `primaryOrganisationalUnit` instead")
}

type UserBillingCategory {
	id: ID!
	name: String!
	description: String
	users(filterBy: UserFilter, orderBy: UserOrdering): [User!]!
}

input UserBillingCategoryFilter {
	id: IdFilter
	name: StringFilter
	description: StringFilter
}

input UserBillingCategoryOrdering {
	field: UserBillingCategoryOrderingField!
	direction: OrderingDirection! = Ascending
}

enum UserBillingCategoryOrderingField {
	Id
	Name
	Description
}

type UserConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [UserEdge!]!
}

"""
An edge in a connection.
"""
type UserEdge {
	"""
	The item at the end of the edge
	"""
	node: User!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input UserFilter {
	username: IdFilter
	createdAt: DateTimeFilter
	updatedAt: DateTimeFilter
	firstName: StringFilter
	middleName: StringFilter
	lastName: StringFilter
	overrideName: StringFilter
	displayName: StringFilter
	function: UserFunctionFilter
	email: StringFilter
	emailExt: StringFilter
	phone: StringFilter
	phoneExt: StringFilter
	status: UserStatusFilter
	desk: IntegerFilter
	room: RoomFilter
	billingCategory: UserBillingCategoryFilter
}

enum UserFunction {
	Trainee
	PhdStudent
	PostdoctoralResearcher
	PrincipalInvestigator
	ResearchStaff
	ResearchAssistant
	OtherResearcher
	StaffScientist
	SupportingStaff
	Unknown
}

input UserFunctionFilter {
	null: Boolean
	equals: UserFunction
	notEquals: UserFunction
	in: [UserFunction!]
}

input UserOrdering {
	field: UserOrderingField!
	direction: OrderingDirection! = Ascending
}

enum UserOrderingField {
	Username
	CreatedAt
	UpdatedAt
	FirstName
	MiddleName
	LastName
	OverrideName
	DisplayName
	Function
	Email
	EmailExt
	Phone
	PhoneExt
	Status
	Room
	BillingCategory
	Desk
}

enum UserStatus {
	Tentative
	CheckedIn
	CheckedOut
	CheckedOutExtended
}

input UserStatusFilter {
	null: Boolean
	equals: UserStatus
	notEquals: UserStatus
	in: [UserStatus!]
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
