// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package pdb2

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type ProjectStatus string

const (
	ProjectStatusActive   ProjectStatus = "Active"
	ProjectStatusInactive ProjectStatus = "Inactive"
)

// __getProjectInput is used internally by genqlient
type __getProjectInput struct {
	Number string `json:"number"`
}

// GetNumber returns __getProjectInput.Number, and is useful for accessing the field via an interface.
func (v *__getProjectInput) GetNumber() string { return v.Number }

// getProjectProject includes the requested fields of the GraphQL type Project.
type getProjectProject struct {
	Number string                     `json:"number"`
	Title  string                     `json:"title"`
	Owner  getProjectProjectOwnerUser `json:"owner"`
	Status ProjectStatus              `json:"status"`
}

// GetNumber returns getProjectProject.Number, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetNumber() string { return v.Number }

// GetTitle returns getProjectProject.Title, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetTitle() string { return v.Title }

// GetOwner returns getProjectProject.Owner, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetOwner() getProjectProjectOwnerUser { return v.Owner }

// GetStatus returns getProjectProject.Status, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetStatus() ProjectStatus { return v.Status }

// getProjectProjectOwnerUser includes the requested fields of the GraphQL type User.
type getProjectProjectOwnerUser struct {
	Username string `json:"username"`
}

// GetUsername returns getProjectProjectOwnerUser.Username, and is useful for accessing the field via an interface.
func (v *getProjectProjectOwnerUser) GetUsername() string { return v.Username }

// getProjectResponse is returned by getProject on success.
type getProjectResponse struct {
	Project getProjectProject `json:"project"`
}

// GetProject returns getProjectResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectResponse) GetProject() getProjectProject { return v.Project }

func getProject(
	ctx context.Context,
	client graphql.Client,
	number string,
) (*getProjectResponse, error) {
	req := &graphql.Request{
		OpName: "getProject",
		Query: `
query getProject ($number: ID!) {
	project(number: $number) {
		number
		title
		owner {
			username
		}
		status
	}
}
`,
		Variables: &__getProjectInput{
			Number: number,
		},
	}
	var err error

	var data getProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
